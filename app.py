import json
from datetime import datetime
from os import environ, listdir, path, remove, urandom
from pathlib import Path

import markdown
from apispec import APISpec
from apispec.ext.marshmallow import MarshmallowPlugin
from apispec_webframeworks.flask import FlaskPlugin
from flask import (Flask, flash, jsonify, make_response, redirect,
                   render_template, request, send_from_directory, url_for)
from flask_cors import CORS
from werkzeug.utils import secure_filename

import controllers as controllers
from controllers import import_csv_file
from schemas import (SingleCalculationRequestParameters, SingleCalculationResponseSchema,
                     MultipleCalculationsRequestParameters, MultipleCalculationsResponseSchema,
                     ReferencesResponseSchema,
                     FictionalChildRequestParameters, FictionalChildResponseSchema)


#######################
##### FLASK SETUP #####
app = Flask(__name__, static_folder="static")
CORS(app)

# Declare shell colour variables for logging output
OKBLUE = "\033[94m"
OKGREEN = "\033[92m"
WARNING = "\033[93m"
FAIL = "\033[91m"
ENDC = "\033[0m"

# ENVIRONMENT
# Load the secret key from the ENV if it has been set
if "FLASK_SECRET_KEY" in environ:
    app.secret_key = environ["FLASK_SECRET_KEY"]
    print(f"{OKGREEN} * FLASK_SECRET_KEY was loaded from the environment{ENDC}")
# Otherwise create a new one. (NB: We don't need session persistence between reboots of the app)
else:
    app.secret_key = urandom(16)
    print(f"{OKGREEN} * A new SECRET_KEY for Flask was automatically generated{ENDC}")

from app import app     # position of this import is important. Don't allow it to be autoformatted alphabetically to the top of the imports!

##### END FLASK SETUP #####
###########################

###########################
##### API SPEC ############
# API spec is autogenerated using the 'api-spec' library, and saved in the project root
# as well as being served on the root '/' endpoint for consumption by services
spec = APISpec(
    title="RCPCH Digital Growth Charts API Server",
    version="0.0.3",
    openapi_version="3.0.2",
    info=dict(
        description="Royal College of Paediatrics and Child Health Digital Growth Charts API Server",
        license={"name": "GNU Affero General Public License",
                 "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"}),
    plugins=[MarshmallowPlugin(), FlaskPlugin()],
    servers=[{"url": 'https://api.rcpch.ac.uk/',
              "description": 'RCPCH Production API Gateway'},
             {"url": 'https://localhost:5000/',
              "description": 'Your local development API'}],
)


##### END API SPEC ########
###########################


# JSON CALCULATION OF MULTIPLE MEASUREMENT METHODS AT SAME TIME
# USED BY THE FLASK DEMO CLIENT
@app.route("/uk-who/calculations", methods=["POST"])
def ukwho_calculations():
    """Multiple Calculations API. Returns centiles for height, weight, BMI and OFC when supplied the required input values.
    ---
    post:
      parameters:
      - in: header
        schema: MultipleCalculationsRequestParameters
      summary: 'Calculates multiple digital growth chart parameters'
      responses:
        200:
          description: "Centile calculations corresponding to the supplied data"
          content:
            application/json:
              schema: MultipleCalculationsResponseSchema
    """
    response = controllers.perform_calculations(
        birth_date=datetime.strptime(request.form["birth_date"], "%Y-%m-%d"),
        observation_date=datetime.strptime(
            request.form["observation_date"], "%Y-%m-%d"),
        height=float(request.form["height_in_cm"]),
        weight=float(request.form["weight_in_kg"]),
        ofc=float(request.form["head_circ_in_cm"]),
        sex=str(request.form["sex"]),
        gestation_weeks=int(request.form["gestation_weeks"]),
        gestation_days=int(request.form["gestation_days"])
    )
    return jsonify(response)


spec.components.schema("Calculations", schema=MultipleCalculationsResponseSchema)
with app.test_request_context():
    spec.path(view=ukwho_calculations)


@app.route("/uk-who/calculation", methods=["POST"])
def ukwho_calculation():
    """Single Calculations API.
    (Used by the React demo client)
    JSON CALCULATION OF SINGLE MEASUREMENT_METHOD ('height', 'weight', 'bmi', 'ofc'): Note that BMI must be precalculated for this function
    ---
    post:
      parameters:
      - in: header
        schema: SingleCalculationRequestParameters
      summary: 'Calculates single digital growth chart parameters'
      responses:
        200:
          description: "Centile calculation (single) according to the supplied data"
          content:
            application/json:
              schema: SingleCalculationResponseSchema
    """
    calculation = controllers.perform_calculation(
        birth_date=datetime.strptime(request.form["birth_date"], "%Y-%m-%d"),
        observation_date=datetime.strptime(
            request.form["observation_date"], "%Y-%m-%d"),
        measurement_method=str(request.form["measurement_method"]),
        observation_value=float(request.form["observation_value"]),
        sex=str(request.form["sex"]),
        gestation_weeks=int(request.form["gestation_weeks"]),
        gestation_days=int(request.form["gestation_days"])
    )
    return jsonify(calculation)


spec.components.schema("Calculation", schema=SingleCalculationResponseSchema)
with app.test_request_context():
    spec.path(view=ukwho_calculation)




@app.route("/growth/ukwho/chart_data", methods=["POST"])
def chart_data():
    """
    Chart data API route
    requires results data params
    Returns HTML content derived from the README.md of the API repository
    To amend the instructions please submit a pull request
    """
    results = json.loads(request.form["results"])
    unique_child = request.form["unique_child"]
    # unique_child = request.args["unique_child"]
    # born preterm flag to pass to charts
    born_preterm = (results[0]["birth_data"]["gestation_weeks"]
                    != 0 and results[0]["birth_data"]["gestation_weeks"] < 37)
    if unique_child == "true":
        # data are serial data points for a single child
        # Prepare data from plotting
        child_data = controllers.create_data_plots(results)

        # Retrieve sex of child to select correct centile charts
        sex = results[0]["birth_data"]["sex"]
    else:
        # Prepare data from plotting
        child_data = controllers.create_data_plots(results)
        # Retrieve sex of child to select correct centile charts
        sex = results[0]["birth_data"]["sex"]
    # Create Centile Charts
    centiles = controllers.create_centile_values(
        sex, born_preterm=born_preterm)
    return jsonify({
        "sex": sex,
        "child_data": child_data,
        "centile_data": centiles
    })


@app.route("/uk-who/spreadsheet", methods=["POST"])
def ukwho_spreadsheet():
    csv_file = request.files["csv_file"]
    calculated_results = import_csv_file(csv_file)
    return calculated_results


@app.route("/utilities/references", methods=["GET"])
def utilities_references():
    """
    Centile References Library API route. Does not expect any parameters. Returns data on the growth reference data sources that this project is aware of. To add a new reference please submit a pull request, create a GitHub Issue, or otherwise contact the Growth Charts team.
    ---
    get:
      responses:
        200:
          description: "Reference data"
          content:
            application/json:
              schema: ReferencesResponseSchema
    """
    references_data = controllers.references()
    return jsonify(references_data)


spec.components.schema("References", schema=ReferencesResponseSchema)
with app.test_request_context():
    spec.path(view=utilities_references)


@app.route("/utilities/create_fictional_child_measurements", methods=["POST"])
def utilities_create_fictional_child_measurements():
    """
    Fictional Child Data Generator API route. Returns a series of fictional measurement data for a child.
    Used for testing, demonstration and research purposes.
    ---
    post:
      parameters:
      - in: header
        schema: FictionalChildRequestParameters
      responses:
        200:
          description: "'Fictional child' test data generation endpoint"
          content:
            application/json:
              schema: FictionalChildResponseSchema
    """
    fictional_child_data = controllers.generate_fictional_data(
        drift_amount=float(request.form["drift_amount"]),
        intervals=int(request.form["intervals"]),
        interval_type=request.form["interval_type"],
        measurement_method=request.form["measurement_method"],
        number_of_measurements=int(request.form["number_of_measurements"]),
        sex=request.form["sex"],
        starting_age=float(request.form["starting_age"]),
        starting_sds=float(request.form["starting_sds"])
    )
    return jsonify(fictional_child_data)


spec.components.schema("Fictional Child", schema=FictionalChildResponseSchema)
with app.test_request_context():
    spec.path(view=utilities_create_fictional_child_measurements)


@app.route("/utilities/instructions", methods=["GET"])
def utilities_instructions():
    """
    Instructions API route. Does not expect any parameters.
    Returns HTML content derived from the README.md of the API repository
    To amend the instructions please submit a pull request to https://github.com/rcpch/digital-growth-charts-server
    """
    # open README.md file
    file = path.join(path.abspath(path.dirname(__file__)), "README.md")
    with open(file) as markdown_file:
        html = markdown.markdown(markdown_file.read())
    return jsonify(html)


################
### API SPEC ###

# Create JSON OpenAPI Spec and serve it at /
@app.route("/", methods=["GET"])
def apispec():
    return json.dumps(spec.to_dict())


# Create YAML OpenAPI Spec and serialise it to file
try:
    with open(r'openapi.yaml', 'w') as file:
        openapi_spec = file.write(spec.to_yaml())
        print(f"{OKGREEN} * openAPI3.0 spec was generated and saved to the repo{ENDC}")

except:
    print(f"{FAIL} * An error occurred while processing the openAPI3.0 spec{ENDC}")

### END API SPEC ###
####################


if __name__ == "__main__":
    app.run()
