"""
RCPCH Growth Charts API Server
"""

import json
from datetime import datetime
from os import environ, urandom

from apispec import APISpec
from apispec.ext.marshmallow import MarshmallowPlugin
from apispec_webframeworks.flask import FlaskPlugin
from flask import Flask, jsonify, request
from flask_cors import CORS
import blueprints
import controllers
from schemas import *


#######################
##### FLASK SETUP #####
app = Flask(__name__, static_folder="static")
CORS(app)
app.register_blueprint(
    blueprints.utilities_blueprint.utilities, url_prefix='/utilities')

# Declare shell colour variables for logging output
OKBLUE = "\033[94m"
OKGREEN = "\033[92m"
WARNING = "\033[93m"
FAIL = "\033[91m"
ENDC = "\033[0m"

# ENVIRONMENT
# Load the secret key from the ENV if it has been set
if "FLASK_SECRET_KEY" in environ:
    app.secret_key = environ["FLASK_SECRET_KEY"]
    print(f"{OKGREEN} * FLASK_SECRET_KEY was loaded from the environment{ENDC}")
# Otherwise create a new one. (NB: We don't need session persistence between reboots of the app)
else:
    app.secret_key = urandom(16)
    print(f"{OKGREEN} * A new SECRET_KEY for Flask was automatically generated{ENDC}")

from app import app     # position of this import is important. Don't allow it to be autoformatted alphabetically to the top of the imports!

##### END FLASK SETUP #####
###########################


###########################
##### API SPEC ############
# API spec is autogenerated using the 'api-spec' library, and saved in the project root
# as well as being served on the root '/' endpoint for consumption by services
spec = APISpec(
    title="RCPCH Digital Growth Charts API",
    version="0.0.3",
    openapi_version="3.0.2",
    info=dict(
        description="Royal College of Paediatrics and Child Health Digital Growth Charts",
        license={"name": "GNU Affero General Public License",
                 "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"}),
    plugins=[MarshmallowPlugin(), FlaskPlugin()],
    servers=[{"url": 'https://api.rcpch.ac.uk/',
              "description": 'RCPCH Production API Gateway'},
             {"url": 'https://localhost:5000/',
              "description": 'Your local development API'}],
)
##### END API SPEC ########
###########################


@app.route("/uk-who/calculation", methods=["POST"])
def uk_who_calculation():
    """
    Centile calculation.
    ---
    post:
      summary: Centile and SDS Calculation route.
      description: |
        * Returns a single centile/SDS calculation for the selected `measurement_method`.
        * Gestational age correction will be applied automatically if appropriate according to the gestational age at birth data supplied.
        * Available `measurement_method`s are: `height`, `weight`, `bmi`, or `ofc` (OFC = occipitofrontal circumference = 'head circumference').
        * Note that BMI must be precalculated for the `bmi` function.

      requestBody:
        content:
          application/json:
            schema: SingleCalculationRequestParameters
            example:
                birth_date: "2020-04-12"
                observation_date: "2020-06-12"
                observation_value: 60
                measurement_method: "height"
                sex: male
                gestation_weeks: 40
                gestation_days: 4

      responses:
        200:
          description: "Centile calculation (single) according to the supplied data was returned"
          content:
            application/json:
              schema: SingleCalculationResponseSchema
    """
    if request.is_json:
        req = request.get_json()
        print(req)
        calculation = controllers.perform_calculation(
            birth_date=datetime.strptime(req["birth_date"], "%Y-%m-%d"),
            observation_date=datetime.strptime(
                req["observation_date"], "%Y-%m-%d"),
            measurement_method=str(req["measurement_method"]),
            observation_value=float(req["observation_value"]),
            sex=str(req["sex"]),
            gestation_weeks=int(req["gestation_weeks"]),
            gestation_days=int(req["gestation_days"])
        )
        return jsonify(calculation)
    else:
        return "Request body mimetype should be application/json", 400


spec.components.schema("calculation", schema=SingleCalculationResponseSchema)
with app.test_request_context():
    spec.path(view=uk_who_calculation)


@app.route("/uk-who/chart-data", methods=["POST"])
def uk_who_chart_data():
    """
    Chart data.
    ---
    post:
      summary: Chart data API route.
      description: |
        * Requires results data paramaters from a call to the calculation endpoint.
        * Returns geometry data for constructing the lines of a traditional growth chart.

      requestBody:
        content:
          application/json:
            schema: ChartDataRequestParameters

      responses:
        200:
          description: "Chart data for plotting a traditional growth chart was returned"
          content:
            application/json:
              schema: ChartDataResponseSchema
    """
    if request.is_json:
        req = request.get_json()
        results = req["results"]
        print(type(results))
        unique_child = req["unique_child"]
        # born preterm flag to pass to charts
        born_preterm = (results[0]["birth_data"]["gestation_weeks"]
                        != 0 and results[0]["birth_data"]["gestation_weeks"] < 37)
        if unique_child == "true":
            # data are serial data points for a single child
            # Prepare data from plotting
            child_data = controllers.create_data_plots(results)
            # Retrieve sex of child to select correct centile charts
            sex = results[0]["birth_data"]["sex"]
        else:
            # if unique_child = False then the series of calculations are from different children
            # Prepare data from plotting
            child_data = controllers.create_data_plots(results)
            # Retrieve sex of child to select correct centile charts
            sex = results[0]["birth_data"]["sex"]
        # Create Centile Charts
        centiles = controllers.create_centile_values(
            sex, born_preterm=born_preterm)

        return jsonify({
            "sex": sex,
            "child_data": child_data,
            "centile_data": centiles
        })
    else:
        return "Request body should be application/json", 400


spec.components.schema("chartData", schema=ChartDataResponseSchema)
with app.test_request_context():
    spec.path(view=uk_who_chart_data)


@app.route("/uk-who/plottable-child-data", methods=["POST"])
def uk_who_plottable_child_data():
    """
    Child growth data in plottable format.
    ---
    post:
      summary: Child growth data in plottable format.
      description: |
        * Requires results data parameters from a call to the calculation endpoint.
        * Returns child measurement data in a plottable format (x and y parameters), with centiles and ages for labels.

      requestBody:
        content:
          application/json:
            schema: ChartDataRequestParameters

      responses:
        200:
          description: |
            * Child growth data in plottable format (x and y parameters, centile and age labels) was returned.
          content:
            application/json:
              schema: ChartDataResponseSchema
    """
    if request.is_json:
        req = request.get_json()
        results = req["results"]
        # born preterm flag to pass to charts
        # born_preterm = (results[0]["birth_data"]["gestation_weeks"]
        #                 != 0 and results[0]["birth_data"]["gestation_weeks"] < 37)

        # data are serial data points for a single child
        # Prepare data from plotting
        child_data = controllers.create_plottable_child_data(results)
        # Retrieve sex of child to select correct centile charts
        sex = results[0]["birth_data"]["sex"]

        return jsonify({
            "sex": sex,
            "child_data": child_data,
        })
    else:
        return "Request body should be application/json", 400


spec.components.schema("plottableChildData",
                       schema=PlottableChildDataResponseSchema)
with app.test_request_context():
    spec.path(view=uk_who_plottable_child_data)


@app.route("/uk-who/spreadsheet", methods=["POST"])
def ukwho_spreadsheet():
    """
    ***INCOMPLETE***
    Spreadsheet file uploadte.
    ---
    post:
      summary: Spreadsheet file upload API route.
      description: |
        * This endpoint is used for development and testing only and it is not envisaged that it will be in the live API.

      requestBody:
        content:
          text/csv:
            schema: ChartDataRequestParameters

      responses:
        200:
          description: |
            * Chart data for plotting a traditional growth chart was returned.
          content:
            application/json:
              schema: ChartDataResponseSchema
    """
    csv_file = request.files["csv_file"]
    calculated_results = controllers.import_csv_file(csv_file)
    return calculated_results


### Utilities refactored out into Blueprints ###
spec.components.schema("references", schema=ReferencesResponseSchema)
with app.test_request_context():
    spec.path(view=blueprints.references)

spec.components.schema("fictionalChild", schema=FictionalChildResponseSchema)
with app.test_request_context():
    spec.path(view=blueprints.create_fictional_child_measurements)

with app.test_request_context():
    spec.path(view=blueprints.instructions)


################################
### API SPEC AUTO GENERATION ###

# Create JSON OpenAPI Spec and serve it at /
@app.route("/", methods=["GET"])
def apispec():
    """
    openAPI3.0 Specification.
    ---
    get:
      summary: openAPI3.0 Specification.
      description: |
        * The root endpoint of the dGC API returns the openAPI3.0 specification in JSON format.
        * This can be used to autogenerate clients and tests.
        * We use it internally to generate all documentation, Postman collections and tests.

      responses:
        200:
          description: |
            * openAPI3.0 Specification in JSON format, conforming to https://swagger.io/specification/, is returned.
          content:
            application/json:
              schema: OpenApiSchema
    """
    return json.dumps(spec.to_dict())


with app.test_request_context():
    spec.path(view=apispec)

# Create YAML OpenAPI Spec and serialise it to file
try:
    with open(r'openapi.yaml', 'w') as file:
        openapi_spec = file.write(spec.to_yaml())
        print(f"{OKGREEN} * openAPI3.0 spec was generated and saved to the repo{ENDC}")

except:
    print(f"{FAIL} * An error occurred while processing the openAPI3.0 spec{ENDC}")

### END API SPEC AUTO GENERATION ###
####################################


if __name__ == "__main__":
    app.run()
