"""
RCPCH Growth Charts API Server
"""

import json
from datetime import datetime
from os import environ, urandom

from flask import Flask, jsonify, request
from flask_cors import CORS
from apispec import APISpec
from apispec.ext.marshmallow import MarshmallowPlugin
from apispec_webframeworks.flask import FlaskPlugin

import controllers
import blueprints
import schemas


#######################
##### FLASK SETUP #####
app = Flask(__name__, static_folder="static")
CORS(app)

# Mount all Utilities endpoints from the blueprint
app.register_blueprint(
    blueprints.utilities_blueprint.utilities, url_prefix='/utilities')

# Mount all UK-WHO endpoints from the blueprint
app.register_blueprint(
    blueprints.uk_who_blueprint.uk_who, url_prefix='/uk-who')

# Declare shell colour variables for logging output
OKBLUE = "\033[94m"
OKGREEN = "\033[92m"
WARNING = "\033[93m"
FAIL = "\033[91m"
ENDC = "\033[0m"

# ENVIRONMENT
# Load the secret key from the ENV if it has been set
if "FLASK_SECRET_KEY" in environ:
    app.secret_key = environ["FLASK_SECRET_KEY"]
    print(f"{OKGREEN} * FLASK_SECRET_KEY was loaded from the environment{ENDC}")
# Otherwise create a new one. (NB: We don't need session persistence between reboots of the app)
else:
    app.secret_key = urandom(16)
    print(f"{OKGREEN} * A new SECRET_KEY for Flask was automatically generated{ENDC}")

from app import app     # position of this import is important. Don't allow it to be autoformatted alphabetically to the top of the imports!

##### END FLASK SETUP #####
###########################


###########################
##### API SPEC ############
# API spec is autogenerated using the 'api-spec' library, and saved in the project root
# as well as being served on the root '/' endpoint for consumption by services
spec = APISpec(
    title="RCPCH Digital Growth Charts API",
    version="0.0.3",
    openapi_version="3.0.2",
    info=dict(
        description="Royal College of Paediatrics and Child Health Digital Growth Charts",
        license={"name": "GNU Affero General Public License",
                 "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"}),
    plugins=[MarshmallowPlugin(), FlaskPlugin()],
    servers=[{"url": 'https://api.rcpch.ac.uk/',
              "description": 'RCPCH Production API Gateway'},
             {"url": 'https://localhost:5000/',
              "description": 'Your local development API'}],
)

# UK-WHO endpoints as blueprints
spec.components.schema(
    "calculation", schema=schemas.CalculationResponseSchema)
with app.test_request_context():
    spec.path(view=blueprints.uk_who_blueprint.uk_who_calculation)

spec.components.schema("chartData", schema=schemas.ChartDataResponseSchema)
with app.test_request_context():
    spec.path(view=blueprints.uk_who_blueprint.uk_who_chart_coordinates)

spec.components.schema("plottableChildData",
                       schema=schemas.PlottableChildDataResponseSchema)
with app.test_request_context():
    spec.path(view=blueprints.uk_who_blueprint.uk_who_plottable_child_data)

# Utilities endpoints as blueprints
spec.components.schema("references", schema=schemas.ReferencesResponseSchema)
with app.test_request_context():
    spec.path(view=blueprints.utilities_blueprint.references)

spec.components.schema(
    "fictionalChild", schema=schemas.FictionalChildResponseSchema)
with app.test_request_context():
    spec.path(
        view=blueprints.utilities_blueprint.create_fictional_child_measurements)

with app.test_request_context():
    spec.path(view=blueprints.utilities_blueprint.instructions)


# TODO Trisomy 21 endpoint

# TODO Turner's syndrome endpoint

##### END API SPEC ########
###########################

# Create JSON OpenAPI Spec and serve it at /


@app.route("/", methods=["GET"])
def openapi_endpoint():
    """
    openAPI3.0 Specification.
    ---
    get:
      summary: openAPI3.0 Specification.
      description: |
        * The root endpoint of the Digital Growth Charts API returns the openAPI3.0 specification in JSON format.
        * This can be used to autogenerate client scaffolding and tests.
        * We use it internally to generate all documentation, Postman collections and tests.
        * The openAPI specification is also available in YAML form, in the root of the Server codebase at https://github.com/rcpch/digital-growth-charts-server

      responses:
        200:
          description: |
            * openAPI3.0 Specification in JSON format, conforming to https://swagger.io/specification/, is returned.
          content:
            application/json:
              schema: OpenApiSchema
    """
    return json.dumps(spec.to_dict()), 200


# OpenAPI3 specification endpoint
with app.test_request_context():
    spec.path(view=openapi_endpoint)


@app.route("/uk-who/spreadsheet", methods=["POST"])
def ukwho_spreadsheet():
    """
    ***INCOMPLETE***
    Spreadsheet file uploadte.
    ---
    post:
      summary: Spreadsheet file upload API route.
      description: |
        * This endpoint is used for development and testing only and it is not envisaged that it will be in the live API.

      requestBody:
        content:
          text/csv:
            schema: ChartDataRequestParameters

      responses:
        200:
          description: |
            * Chart data for plotting a traditional growth chart was returned.
          content:
            application/json:
              schema: ChartDataResponseSchema
    """
    csv_file = request.files["csv_file"]
    calculated_results = controllers.import_csv_file(csv_file)
    return calculated_results


################################
### API SPEC AUTO GENERATION ###

# Create YAML OpenAPI Spec and serialise it to file
try:
    with open(r'openapi.yaml', 'w') as file:
        openapi_spec = file.write(spec.to_yaml())
        print(f"{OKGREEN} * openAPI3.0 spec was generated and saved to the repo{ENDC}")

except:
    print(f"{FAIL} * An error occurred while processing the openAPI3.0 spec{ENDC}")

### END API SPEC AUTO GENERATION ###
####################################


if __name__ == "__main__":
    app.run()
